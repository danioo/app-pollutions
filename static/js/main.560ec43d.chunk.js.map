{"version":3,"sources":["Components/CountryInput/style.js","Components/CountryInput/index.js","Components/Autocomplete/index.js","Components/City/style.js","Components/City/index.js","API/wiki.js","Components/CitiesList/index.js","style.js","API/openaq.js","App.js","serviceWorker.js","index.js"],"names":["HintWrapper","styled","ul","Hint","li","StyledInput","input","CountryInput","props","hintsList","onInputFocus","onInputChange","onHintClick","value","onFocus","onChange","map","hint","id","key","onClick","name","Autocomplete","state","hints","search","filterHints","countries","filter","country","toLowerCase","includes","event","setState","target","localStorage","setItem","countryCode","find","code","getCitiesList","this","getItem","Component","CityWrapper","div","CityTitleWrapper","CityTitle","h3","CityDescription","City","useState","showText","setShowText","cityInfo","setCityInfo","useEffect","city","axios","get","then","response","data","query","pages","catch","error","console","log","res","cityNfo","Object","values","extract","cityDescriptionInfo","className","CitiesList","cities","idx","StyledApp","Wrapper","StyledTitle","h1","getCities","inputVal","Set","results","item","slice","App","loading","setLoading","setCities","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.560ec43d.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const HintWrapper = styled.ul`\r\n    width: 40%;\r\n    position: relative;\r\n    background-color: white;\r\n    box-shadow: 0px 0px 40px #B7B7B7;\r\n    z-index: 100;\r\n    list-style-type: none;\r\n    top:10px;\r\n    margin-block:0; \r\n    margin-inline:0;\r\n    padding-block:0; \r\n    padding-inline:0; \r\n`\r\n\r\nexport const Hint = styled.li`\r\n    width: 100%;\r\n    height: 35px;\r\n    font-weight: 300;\r\n    font-size: 20px;\r\n    cursor: pointer;\r\n    text-align: center;\r\n    margin: 0;\r\n    padding: 0;\r\n    &:hover {\r\n        background-color: #f2f2f2;\r\n        font-weight: 400;\r\n    }\r\n    &:first-child {\r\n        padding-top: 5px;\r\n    }\r\n`\r\n\r\nexport const StyledInput = styled.input`\r\n    width: 40%;\r\n    height: 100%;\r\n    padding: 20px;\r\n    border: 0;\r\n    font-size: 25px;\r\n    font-weight: 300;\r\n    border-bottom: 3px solid #C8CCD4;\r\n    transition: all .150s ease;\r\n    background-color: white;\r\n    text-align: center;\r\n    &:focus {\r\n        outline: none\r\n        box-shadow: 0px 0px 40px #B7B7B7;\r\n    }\r\n`\r\n","import React from 'react';\r\nimport { StyledInput, HintWrapper, Hint } from './style'\r\n\r\nconst CountryInput = (props) => {\r\n  const { hintsList, onInputFocus, onInputChange, onHintClick, value} = props \r\n    return (\r\n      <>\r\n        <StyledInput onFocus={onInputFocus} onChange={onInputChange} value={value} />\r\n        {hintsList && (\r\n          <HintWrapper>\r\n              {hintsList.map( (hint, id) => (\r\n                  <Hint \r\n                    key={id} \r\n                    onClick={() => onHintClick(hint.name)}>\r\n                    {hint.name}\r\n                  </Hint>\r\n              ))}\r\n          </HintWrapper>      \r\n        )}\r\n      </>\r\n    )\r\n}\r\n\r\nexport default CountryInput;\r\n","import React, { Component } from 'react';\r\nimport CountryInput from '../CountryInput';\r\nimport countries from '../../data/countries.json';\r\n\r\nclass Autocomplete extends Component {\r\n    state = {\r\n        hints: '',\r\n        search: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n        search: localStorage.getItem(\"searchValue\")\r\n        });\r\n    }\r\n\r\n    filterHints = (value) => (\r\n        countries.countries.filter( country => country.name.toLowerCase().includes(value.toLowerCase()))\r\n    )  \r\n\r\n    onInputChange = (event) => {\r\n        this.setState({\r\n            search: event.target.value,\r\n            hints: this.filterHints(event.target.value)\r\n        })\r\n        localStorage.setItem('searchValue', event.target.value);\r\n    }\r\n\r\n    onInputFocus = () => {\r\n        this.setState({\r\n            hints: this.filterHints(this.state.search)\r\n        });\r\n    }\r\n\r\n    onHintClick = (hint) => {\r\n        this.setState({\r\n            hints: [],\r\n            search:  hint\r\n        });\r\n        localStorage.setItem(\"searchValue\", hint);\r\n        const countryCode =  countries.countries.find(country => country.name === hint).code;\r\n        this.props.getCitiesList(countryCode)\r\n    }\r\n     \r\n    render(){\r\n        return(\r\n            <CountryInput \r\n                onInputFocus={this.onInputFocus}\r\n                onInputChange={this.onInputChange}\r\n                hintsList={this.state.hints}\r\n                onHintClick={this.onHintClick}\r\n                value={this.state.search}\r\n            />\r\n        )\r\n    }\r\n} \r\n\r\nexport default Autocomplete;\r\n","import styled from 'styled-components'\r\n\r\n\r\nexport const CityWrapper = styled.div`\r\n    font-family: 'Roboto Mono', monospace;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    max-width: 80%;\r\n    cursor: pointer;\r\n`\r\nexport const CityTitleWrapper = styled.div`\r\n    background-color: white;\r\n    width: 180px;\r\n    height: 60%;\r\n    padding: 0 15px;\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    border-bottom: 3px solid #C8CCD4;\r\n    margin-top:15px;\r\n`\r\n\r\nexport const CityTitle = styled.h3`\r\n    font-weight: 500;\r\n    background-color: white;\r\n\r\n`\r\n\r\nexport const CityDescription = styled.div`\r\n    background-color: white;\r\n    padding: 10px;\r\n`\r\n","import React, { useState, useEffect } from 'react';\r\nimport { getCityInfo } from '../../API/wiki';\r\nimport { CityTitle, CityWrapper, CityDescription, CityTitleWrapper } from './style'\r\n\r\nconst City = (props) => {\r\n    const [showText, setShowText] = useState(false);\r\n    const [cityInfo, setCityInfo] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getCityInfo(props.name).then(res => {\r\n            let cityNfo = Object.values(res)\r\n            setCityInfo(cityNfo[0].extract);\r\n        })\r\n      },[props.name]);\r\n    \r\n    const cityDescriptionInfo = cityInfo ? cityInfo : <p>City Description not found</p>\r\n    \r\n    return( \r\n        <CityWrapper onClick={() => setShowText(!showText)}>\r\n            <CityTitleWrapper>\r\n                <CityTitle>{props.name}</CityTitle> \r\n                {showText ? <i className=\"fas fa-caret-up\" /> : <i className=\"fas fa-caret-down\" />}\r\n            </CityTitleWrapper>\r\n            {showText && <CityDescription>{cityDescriptionInfo}</CityDescription>}\r\n        </CityWrapper>\r\n    )\r\n}\r\n\r\nexport default City;\r\n","import axios from \"axios\";\r\n\r\nexport const getCityInfo = (city) => {\r\n  return axios\r\n    .get( `https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&origin=*&titles=${city}`)\r\n        .then(response => {\r\n            return response.data.query.pages;\r\n        })\r\n        .catch(function(error) {\r\n            console.log(error);\r\n        });\r\n}\r\n","import React, {useState, useEffect } from 'react';\r\nimport City from '../City';\r\n\r\nconst CitiesList = (props) => {\r\n    return(\r\n        props.cities.map( (city, idx) => (\r\n            <City key={idx} name={city}/>\r\n        ))\r\n     )\r\n}\r\nexport default CitiesList;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledApp = styled.div`\r\n    max-width: 100vw;\r\n    height: 100vh;\r\n    background-color: #EBEFF2;\r\n    overflow: auto;\r\n`\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n\r\n`\r\nexport const StyledTitle = styled.h1`\r\n    color: black;\r\n    text-align: center;\r\n    font-size: 3rem;\r\n    padding-top: 2rem;\r\n    font-family: 'Roboto Mono', monospace;\r\n    `","import axios from \"axios\";\r\n\r\nexport const getCities = (inputVal) => {\r\n  return axios\r\n    .get( `https://api.openaq.org/v1/latest?country=${inputVal}&order_by=measurements[0].value&sort=desc&parameter=pm25`)\r\n        .then(response => {\r\n            const truncatedData = [...new Set(response.data.results.map(item => item.city))].slice(0, 10)\r\n            return truncatedData;\r\n        })\r\n        .catch(function(error) {\r\n            console.log(error);\r\n        });\r\n}\r\n","import React, {useState} from 'react';\nimport Autocomplete from './Components/Autocomplete';\nimport CitiesList from './Components/CitiesList';\n\nimport { StyledApp, Wrapper, StyledTitle } from './style';\nimport { getCities } from './API/openaq';\n\n\nfunction App() {\n  const [loading, setLoading] = useState(false)\n  const [cities, setCities] = useState([]);\n\n  const getCitiesList = (key) => {\n    setLoading(true);\n    getCities(key).then(res => {\n      setCities(res);\n      setLoading(false);\n    });\n  }\n\n  return (\n    <StyledApp>\n      <Wrapper >\n        <StyledTitle>The MOST polluted cities:</StyledTitle>\n        <Autocomplete  getCitiesList={getCitiesList}/>\n        { !loading && <CitiesList cities={cities}/>}\n      </Wrapper>\n  </StyledApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}